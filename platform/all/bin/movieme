#!/bin/sh

# movieme
# create an animated gif from a movie file

# boolean constants (with nice outputs)
TRUE=Yes
FALSE=No

FILE=

# animation options
START=0
DURATION=5
FRAMERATE=7
ALTERNATE=$FALSE

# image options
DITHER=$TRUE
WIDTH=500

# process options
INTERACTIVE=$FALSE
CONTINUE=$FALSE

TEMPDIR=/tmp/movieme

# "parse" options
while [[ $# -gt 0 ]]; do
  case $1 in
    --start|-s)
      shift
      START=$1
      ;;
    --duration|-d)
      shift
      DURATION=$1
      ;;
    --framerate|-f)
      shift
      FRAMERATE=$1
      ;;
    --no-dither|-n)
      DITHER=$FALSE
      ;;
    --width|-w)
      shift
      WIDTH=$1
      ;;
    --alternate|-a)
      ALTERNATE=$TRUE
      ;;
    --interactive|-i)
      if [[ "$CLEANUP" == "$TRUE" ]]; then
        echo "Invalid arguments; --interactive and --cleanup cannot be used together."
        exit 1
      fi
      INTERACTIVE=$TRUE
      ;;
    --continue)
      CONTINUE=$TRUE
      ;;
    --cleanup)
      if [[ "$INTERACTIVE" == "$TRUE" ]]; then
        echo "Invalid arguments; --interactive and --cleanup cannot be used together."
        exit 1
      fi
      CLEANUP=$TRUE
      ;;
    *)
      if [[ -f "$1" ]]; then
        if [[ -z "$FILE" ]]; then
          FILE=$1
        else
          echo "Too many files in arguments; using first."
        fi
      else
        echo "Unrecognised argument \"$1\"." >&2
      fi
      ;;
  esac
  shift
done

stats() {
  echo "$(basename $0)
      File: $FILE
Start time: $START
  Duration: $DURATION
 Framerate: $FRAMERATE
 Alternate: $ALTERNATE
    Dither: $DITHER
     Width: $WIDTH
"
}

cleanup() {
  rm -rf "$TEMPDIR"
}

extractFrames() {
  # create tmp dir
  mkdir -p "$TEMPDIR"

  ffmpeg \
    -i "$FILE" \
    -f image2 \
    -vf "scale=iw*sar:ih" \
    -ss "$START" \
    -t "$DURATION" \
    -r "$FRAMERATE" \
    -loglevel fatal \
    "$TEMPDIR/frame-%05d.png"
}

animate() {
  INPUT_ARGS="-verbose \
    -delay 0"

  if [[ "$DITHER" -eq "$FALSE" ]]; then
    INPUT_ARGS="${INPUT_ARGS} \
      +dither"
  fi

  INPUT_ARGS="${INPUT_ARGS} \
    -loop 0 \
    -layers OptimizeTransparency"

  POSTPROCESS_ARGS="-resize $WIDTH"

  if [[ "$ALTERNATE" -eq "$TRUE" ]]; then
    POSTPROCESS_ARGS="${POSTPROCESS_ARGS} \
      -duplicate 1,-2-1"
  fi

  convert \
    $INPUT_ARGS \
    "$TEMPDIR/frame-[0-9]*.png" \
    $POSTPROCESS_ARGS \
    "$HOME/Desktop/Animated $(zdate "%Y-%m-%d at %H.%M.%S").gif"
}

if [[ "$CONTINUE" == "$FALSE" ]]; then

  if ! [[ -f "$FILE" ]]; then
    echo "Supplied file does not exist."
    exit 1
  fi

  stats
  cleanup
  extractFrames

else

  source "$TEMPDIR/interactive.meta.sh"
  stats

fi

if [[ "$INTERACTIVE" == "$TRUE" ]]; then

  echo "FILE=$FILE
START=$START
DURATION=$DURATION
FRAMERATE=$FRAMERATE
ALTERNATE=$ALTERNATE
DITHER=$DITHER
WIDTH=$WIDTH" > "$TEMPDIR/interactive.meta.sh"
  echo "Finished splitting frames. Manually edit files in $TEMPDIR, then run \"$(basename $0) --continue\"."
  exit

else

  animate

  if [[ "$CLEANUP" == "$TRUE" ]]; then
    cleanup
  fi

fi
